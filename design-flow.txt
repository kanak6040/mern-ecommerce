📌 Data Flow for MERN E-Commerce App
The data flow in this MERN-based e-commerce system follows a structured path between the frontend, backend, database, authentication, and payment systems. Below is a breakdown of how data moves through the system.

1️⃣ User Authentication Flow (Signup/Login)
📌 Steps:
User Action: The user enters their credentials and submits the login/signup form on the frontend.
API Call: The frontend sends a POST /api/auth/login or POST /api/auth/signup request to the backend.
Validation & Processing:
The backend validates user data (password hashing, email verification).
If successful, the backend generates a JWT token for authentication.
Response to Frontend:
The backend returns the token & user data.
The frontend stores the token in localStorage or Redux store for session management.
Subsequent Requests:
The frontend attaches the token in API headers (Authorization: Bearer <token>) for authenticated routes.
The backend verifies the token in middleware before processing requests.

2️⃣ Product Browsing & Listing Flow
📌 Steps:
User Action: The user visits the homepage or product catalog page.
API Call: The frontend requests product data via GET /api/products.
Database Query:
The backend retrieves products from the MongoDB database using Mongoose.
It may apply filters (category, price range, ratings, etc.).
Response to Frontend:
The backend sends the list of products to the frontend.
The frontend dynamically updates the UI with product cards.

3️⃣ Adding Items to Cart
📌 Steps:
User Action: The user clicks "Add to Cart" on a product.
API Call: The frontend sends a POST /api/cart request to add the item.
Backend Processing:
The backend verifies the user session (JWT authentication).
The product ID and quantity are stored in the cart collection in MongoDB.
Response to Frontend:
The backend sends back the updated cart items.
The frontend updates the cart icon/UI dynamically.

4️⃣ Placing an Order & Payment Flow
📌 Steps:
User Action: The user clicks "Proceed to Checkout" and selects a payment method.
API Call:
The frontend sends a POST /api/orders request with order details.
The backend calculates total price & verifies stock.
Payment Processing:
If using Stripe/PayPal, the backend redirects the user to the payment gateway.
Once payment is confirmed, a webhook updates the order status.
Order Confirmation:
The order is saved in MongoDB.
The backend sends an order confirmation response to the frontend.
The frontend displays a "Thank You" page with order details.

5️⃣ Order Tracking & Management
📌 Steps:
User Action: The user navigates to the Order History page.
API Call: The frontend fetches user orders via GET /api/orders/user.
Database Query:
The backend retrieves orders filtered by user ID.
The status (Pending, Shipped, Delivered) is fetched from MongoDB.
Response to Frontend:
The frontend displays the order history page.
Updates are fetched in real-time using polling or WebSockets.

6️⃣ Admin Dashboard: Managing Products & Orders
📌 Steps:
Admin Action: The admin logs into the dashboard.
API Calls for Management:
POST /api/products → Add a new product.
PUT /api/products/:id → Edit an existing product.
DELETE /api/products/:id → Remove a product.
GET /api/orders → Fetch all customer orders.
PUT /api/orders/:id → Update order status.
Backend & Database Actions:
The backend verifies admin role & updates MongoDB.
Real-Time Updates:
The frontend dynamically updates order & product lists.

🔄 Summary: Data Flow Overview
User initiates an action (e.g., login, product search, add to cart).
Frontend sends API requests to the backend.
Backend processes the request using controllers & middleware.
MongoDB stores/retrieves data based on the request.
Backend sends the response back to the frontend.
Frontend updates the UI dynamically.
For payments & real-time updates, external APIs (Stripe, PayPal, WebSockets) are used.